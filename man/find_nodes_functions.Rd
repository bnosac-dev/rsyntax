% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/find_nodes.r
\name{find_nodes_functions}
\alias{find_nodes_functions}
\alias{children}
\alias{all_children}
\alias{parents}
\alias{all_parents}
\title{Search for parents or children in find_nodes}
\usage{
children(..., save = NA, rel = NULL, not_rel = NULL, select = NULL,
  g_id = NULL, NOT = F, depth = 1)

all_children(..., save = NA, rel = NULL, not_rel = NULL, select = NULL,
  g_id = NULL, NOT = F)

parents(..., save = NA, rel = NULL, not_rel = NULL, select = NULL,
  g_id = NULL, NOT = F, depth = 1)

all_parents(..., save = NA, rel = NULL, not_rel = NULL, select = NULL,
  g_id = NULL, NOT = F)
}
\arguments{
\item{...}{can be used to nest other children, parents, all_children or all_parents functions, to look for grandchildren, 
grandgrandchildren, etc. This is only the first argument for syntactic reasons (see details). Please see the examples for recommended syntax.}

\item{save}{A character vector, specifying the column name under which the selected tokens are returned. 
If NA, the column is not returned.}

\item{rel}{A character vector, specifying the allowed relations between the node and the parent/child. 
If NULL, any relation is allowed. This is different from selecting on the relation column with the select argument, 
because it take into account that when you look for parents, the relation column of the current node should be used 
instead of the relation column of the parent node. In addition, use rel is faster because it uses binary search.
Note that if depth > 1 (or if all_parents/all_children are used), rel is only used for the first parent/child.
In this case, it makes more sense for syntactical clarity to first look for only the direct parent/child and then nest 
another (all_)parents/children search.}

\item{not_rel}{Like rel, but for excluding relations.}

\item{select}{An expression to select specific parents/children. All columns in the tokens input for \link{find_nodes} can be used, 
as well as any column in the environment from which find_nodes is called. (similar to \link{subset.data.frame}).
Note (!!) that select will be performed on the children only (i.e. a subset of the tokenIndex) and thus should not rely on
absolute positions. For instance, do not use a logical vector unless it is a column in the tokenIndex.}

\item{g_id}{A numeric vector, to filter on global id (.G_ID). While this can also be done using 'select', this alternative uses fast binary search.}

\item{NOT}{If TRUE, exclude these children instead of adding them. The filter parameters still work to NOT select specific children.}

\item{depth}{A positive integer, determining how deep parents/children are sought. The default, 1, 
means that only direct parents and children of the node are retrieved. 2 means children and grandchildren, etc.
In all_children and all_parents, the depth is set to Inf (infinite)}
}
\value{
Should not be used outside of \link{find_nodes}
}
\description{
Can be used (and should only be used) inside of the \link{find_nodes} function.
Enables searching for parents or children, either direct (depth = 1) or untill a given depth (depth 2 for children and grandchildren, etc.).
The functions all_children and all_parents are shorthand for recursively retrieving all parents/children
}
\details{
Searching for parents/children within find_nodes works as an AND condition: if it is used, the node must have parents/children.
If select is used to pass an expression, the node must have parents/children for which the expression is TRUE.
The save argument can be used to remember the global token ids (.G_ID) of the parents/children under a given column name.


Having nested queries can be confusing, so we tried to develop the find_nodes function and the accompanying functions in a way
that clearly shows the different levels. As shown in the examples, the idea is that each line is a node, and to look for parents
or children, we put them on the next line with indentation (in RStudio, it should automatically allign correctly when you press enter inside
of the children() or parents() functions).
}
