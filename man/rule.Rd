% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tquery.r
\name{rule}
\alias{rule}
\title{Create a query for dependency based parse trees in a data.table (CoNLL-U or similar format).}
\usage{
rule(..., select = NULL, find = NULL, NOT = NULL, g_id = NULL,
  save = NA)
}
\arguments{
\item{...}{Accepts two types of arguments: name-value pairs for finding nodes (i.e. rows), and functions to look for parents/children of these nodes.

The name in the name-value pairs need to match a column in the data.table, and the value needs to be a vector of the same data type as the column.
Only rows with an exact match to one of the values are found. If multiple name-value pairs are given, they are considered as AND statements. 
If the name is given the suffix __NOT (double underscore), only rows without an exact match are found. (so, lemma__NOT = "fish" look for all rows in which the lemma is not "fish")

To look for parents and children of the nodes that are found, you can use the \link{parents} and \link{children} functions as (named or unnamed) arguments. 
These functions have the same query arguments as tquery, but with some additional arguments.}

\item{select}{An expression to select specific parents/children, which can use any columns in the token data (similar to the subset argument in \link{subset.data.frame}).
However, this has two limitations. Firstly, select should not rely on absolute positions (a logical vector or indices). Secondly, since the expression will only be evaluated
when the query is performed, any names used in the expression that are not columns in the data.table need to be in the environment when the search is performed.
A solution for the second limitation is to explicitly tell tquery to evalute these names immediately, by marking them as .(name). For example, if the name VERBS refers 
to a character vector of verbs, using 'lemma \%in\% .(VERBS)' will replace .(VERBS) with the actual vector.}

\item{g_id}{Find nodes by global id, which is the combination of the doc_id and token_id. Passed as a data.frame or data.table with 2 columns: (1) doc_id and (2) token_id.}

\item{save}{A character vector, specifying the column name under which the selected tokens are returned. 
If NA, the column is not returned.}
}
\value{
A tQuery object, that can be used with the \link{apply_rules} function.

Searching by name-value pairs.
}
\description{
There are two ways to query nodes (i.e. rows). Firstly, you can use named arguments, where the names are column names (in the data.table on which the
queries will be used) and the values are vectors with lookup values. Secondly, you can use the select arguments to use logical expressions.   
The select argument is more versatile (but see the parameter details for limitations), whereas the named argument approach is more explicit and uses binary search (which is much faster).
}
\details{
Children or parents of nodes can be queried by passing the \link{childen} or \link{parents} function as (named or unnamed) arguments.
These functions use the same query format as the tquery function, and children and parents can be nested recursively to find children of children etc.

Please look at the examples below for a recommended syntactic style for using the find_nodes function and these nested functions.
}
\examples{
## it is convenient to first prepare vectors with relevant words/pos-tags/relations
.SAY_VERBS = c("tell", "show","say", "speak") ## etc.
.QUOTE_RELS=  c("ccomp", "dep", "parataxis", "dobj", "nsubjpass", "advcl")
.SUBJECT_RELS = c('su', 'nsubj', 'agent', 'nmod:agent') 

quotes_direct = tquery(lemma = .SAY_VERBS,
                         children(save = 'source', p_rel = .SUBJECT_RELS),
                         children(save = 'quote', p_rel = .QUOTE_RELS))
quotes_direct ## print shows rule
}
