% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/syntax_rules.r
\name{rule}
\alias{rule}
\title{Write rules for extracting syntactic elements from tokens with dependency relations.}
\usage{
rule(..., save = NA, p_rel = NULL, not_p_rel = NULL, lemma = NULL,
  not_lemma = NULL, POS = NULL, not_POS = NULL, select = NULL,
  g_id = NULL)
}
\arguments{
\item{...}{used to nest the \link{parents} and \link{children} functions as unnamed arguments. See the documentation of these
functions for details.}

\item{save}{A character vector, specifying the column name under which the selected tokens are returned. 
If NA, the column is not returned.}

\item{p_rel}{A character vector, specifying the relation of the node to its parent. Note that if you want to filter on the relation of a node to its child,
you should nest a children() search and specify p_rel there.}

\item{not_p_rel}{Like p_rel, but for excluding relations}

\item{lemma}{A character vector, specifying lemma}

\item{not_lemma}{Like lemma, but for excluding lemma}

\item{POS}{A character vector, specifying part-of-speech tags}

\item{not_POS}{Like POS, but for excluding part-of-speech tags}

\item{select}{An expression to select specific parents/children, which can use any columns in the token data (similar to \link{subset.data.frame}).
This should (preferably) not be used for defining rules included in rsyntax, because the column names used will be fixed (p_rel, lemma, pos and g_id use will use the \link{tokenindex_columns} aliases).
Note (!!) that select will be performed on the children only (i.e. a subset of the tokenIndex) and thus should not rely on
absolute positions. For instance, do not use a logical vector unless it is a column in the tokenIndex.}

\item{g_id}{A data.frame or data.table with 2 columns: (1) doc_id and (2) token_id, indicating the global id. While this can also be done using 'select', this alternative uses fast binary search.}
}
\value{
A function for performing the specified rule, using the \link{apply_rules} function.
}
\description{
This is the primary workhorse for writing rules for quote and clause extraction.
Specific nodes can be selected using the various selection parameters (e.g., lemma, pos, p_rel)
Then, from the position of these nodes, you can lookup parents or children, optionally with 
another select expression. This can be done recursively to find children of children etc.
}
\details{
To look for parents or children, use the \link{parents} and \link{children} functions.
Please look at the examples below for a recommended syntactic style for using the find_nodes function and these nested functions.
}
\examples{
## it is convenient to first prepare vectors with relevant words/pos-tags/relations
.SAY_VERBS = c("tell", "show","say", "speak") ## etc.
.QUOTE_RELS=  c("ccomp", "dep", "parataxis", "dobj", "nsubjpass", "advcl")
.SUBJECT_RELS = c('su', 'nsubj', 'agent', 'nmod:agent') 

quotes_direct = rule(select = lemma \%in\% .SAY_VERBS,
                         children(save = 'source', p_rel = .SUBJECT_RELS),
                         children(save = 'quote', p_rel = .QUOTE_RELS))
quotes_direct ## print shows rule
}
